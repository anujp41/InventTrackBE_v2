{"version":3,"sources":["components/TotalCount.js","components/UserCount.js","components/Remaining.js","components/Counter.js","components/Wrapper.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["TotalCount","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","updateState","updateApiData","handleEnter","updateName","modalView","saveData","state","apiData","showModal","_this2","props","socket","on","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","socketId","wrap","_context","prev","next","response","t0","localStorage","getItem","t1","sent","console","log","stop","_x","apply","arguments","id","axios","get","then","catch","err","setState","updatedData","newData","defineProperty","newApiData","objectSpread","itemId","toDo","concat","headers","Socket","event","keyCode","preventDefault","updatedName","refs","textContent","post","name","fruitData","_this3","res","status","_this4","apiDataValues","values","react_default","createElement","Fragment","className","length","map","item","key","count","ref","contentEditable","onKeyDown","onBlur","dangerouslySetInnerHTML","__html","onClick","React","Component","UserCount","userData","userId","fruitId","fruitName","put","handleMsg","userInfo","Consumer","fruitInfo","counter","UserFruit","Remaining","memo","_useState","useState","_useState2","slicedToArray","remainCount","setRemainCount","_useState3","_useState4","dataReceived","setDataReceived","useEffect","emit","remainder","remainingFruitData","Counter","userProps","objectWithoutProperties","src_components_TotalCount","src_components_UserCount","components_Remaining","Wrapper","children","Message","msgBody","setTimeout","webHistory","createBrowserHistory","App","msgModal","displayMsg","HOST","window","location","origin","replace","socketIOClient","setItem","disconnect","undefined","Router","history","src_components_Wrapper","Switch","url","Route","path","render","src_components_Counter","assign","cookies","src_components_Message","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c80208a0.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './TotalCount.css';\n\nclass TotalCount extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.updateApiData = this.updateApiData.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.updateName = this.updateName.bind(this);\n    this.modalView = this.modalView.bind(this);\n    this.saveData = this.saveData.bind(this);\n    this.state = {\n      apiData: [],\n      showModal: false\n    };\n  }\n\n  componentDidMount() {\n    //mounted to component to listen for socket updates on total fruit counter\n    // this.socketListeners.forEach(listener => this.props.socket.on(listner.eventName, listener.fn));\n    this.props.socket\n      .on('updatedCount', async data => {\n        this.updateApiData(data.response);\n        const { socketId } = data;\n        socketId === (await localStorage.getItem('socketId'))\n          ? console.log('you updated!')\n          : console.log('someone else updated!');\n      })\n      .on('fruit-delete', id => {\n        const { apiData } = this.state;\n        delete apiData[id];\n        this.updateState({ data: apiData });\n      });\n    axios\n      .get(`/data/fruit`)\n      .then(this.updateState)\n      .catch(err => console.log('error ', err));\n  }\n  updateState(response) {\n    this.setState({ apiData: response.data });\n  }\n  updateApiData(updatedData) {\n    const newData = { [updatedData.id]: updatedData };\n    const newApiData = { ...this.state.apiData, ...newData };\n    this.setState({ apiData: newApiData });\n  }\n  handleClick(itemId, toDo) {\n    axios.get(`/data/fruit/${toDo}/${itemId}`, {\n      headers: {\n        Socket: localStorage.getItem('socketId')\n      }\n    });\n    // .then(response => console.log('response complete ', response));\n  }\n  handleEnter(event, itemId) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      this.updateName(itemId);\n    }\n  }\n  updateName(itemId) {\n    const updatedName = this.refs[`fruit${itemId}`].textContent;\n    axios\n      .post(`/data/fruit/name/${itemId}`, {\n        name: updatedName\n      })\n      .then(this.updateState);\n  }\n  modalView(showModal) {\n    this.setState({ showModal });\n  }\n  saveData(fruitData) {\n    axios.post(`/data/fruit/fruit`, fruitData).then(res => {\n      if (res.status === 200) {\n        this.updateState(res);\n        this.modalView(false);\n      }\n    });\n  }\n  render() {\n    const apiDataValues = Object.values(this.state.apiData);\n    return (\n      <React.Fragment>\n        <div className=\"header\">All Fruits</div>\n        <div className=\"col-container\">\n          {apiDataValues.length > 0 &&\n            apiDataValues.map(item => (\n              <div key={item.name + item.count} className=\"fruit-container\">\n                <div className=\"count\">\n                  <p\n                    ref={'fruit' + item.id}\n                    className=\"inline\"\n                    contentEditable={true}\n                    onKeyDown={event => this.handleEnter(event, item.id)}\n                    onBlur={() => this.updateName(item.id)}\n                    dangerouslySetInnerHTML={{ __html: item.name }}\n                  />{' '}\n                  : <p className=\"inline\">{item.count}</p>\n                </div>\n                <section>\n                  <button\n                    className=\"decrease\"\n                    onClick={() => this.handleClick(item.id, 'subtract')}\n                  >\n                    -\n                  </button>\n                  <button\n                    className=\"increase\"\n                    onClick={() => this.handleClick(item.id, 'add')}\n                  >\n                    +\n                  </button>\n                  <button\n                    className=\"remove\"\n                    onClick={() => this.handleClick(item.id, 'remove')}\n                  >\n                    x\n                  </button>\n                </section>\n              </div>\n            ))}\n          {/* <button\n          className=\"add-button center\"\n          onClick={() => this.modalView(true)}\n        >\n          Add Item\n        </button> */}\n          {/* {this.state.showModal && (\n          <Modal\n            closeModal={this.modalView}\n            apiURL={this.state.url}\n            handleSave={this.saveData}\n          />\n        )} */}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TotalCount;\n","import React from 'react';\nimport axios from 'axios';\nimport './UserCount.css';\n\nclass UserCount extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      userData: []\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(`/data/user`)\n      .then(response => {\n        return response;\n      })\n      .then(response => this.setState({ userData: response.data }));\n  }\n\n  handleClick(userId, fruitId, fruitName) {\n    axios.put('/data/user/', { userId, fruitId }).then(response => {\n      if (response.data !== 'Gone') {\n        this.props.handleMsg(true, `Congrats, you have one more ${fruitName}!`);\n      } else {\n        this.props.handleMsg(true, `Sorry, ${fruitName} is all gone!`);\n      }\n    });\n  }\n\n  render() {\n    const { userData } = this.state;\n    return (\n      <>\n        <div className=\"header\">User & Fruits</div>\n        <div className=\"col-container\">\n          {userData.length &&\n            userData.map(userInfo => (\n              <div className=\"table-grid\" key={userInfo.name}>\n                <span key={userInfo.id + userInfo.name}>{userInfo.name}</span>\n                {userInfo.Consumer.length ? (\n                  userInfo.Consumer.map(fruitInfo => (\n                    <React.Fragment\n                      key={userInfo.id + userInfo.name + fruitInfo.name}\n                    >\n                      <span\n                        key={userInfo.id + userInfo.name + fruitInfo.id}\n                        onClick={() =>\n                          this.handleClick(\n                            userInfo.id,\n                            fruitInfo.id,\n                            fruitInfo.name\n                          )\n                        }\n                      >\n                        {fruitInfo.name}\n                      </span>\n                      <span\n                        key={\n                          userInfo.id +\n                          userInfo.name +\n                          fruitInfo.id +\n                          fruitInfo.counter\n                        }\n                      >\n                        {fruitInfo.UserFruit.counter}\n                      </span>\n                    </React.Fragment>\n                  ))\n                ) : (\n                  <span\n                    className=\"none\"\n                    key={userInfo.id + userInfo.name + userInfo.id}\n                  >\n                    None\n                  </span>\n                )}\n              </div>\n            ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default UserCount;\n","import React, { useState, useEffect } from 'react';\nimport './Remaining.css';\n\nconst Remaining = React.memo(props => {\n  const [remainCount, setRemainCount] = useState({});\n  const [dataReceived, setDataReceived] = useState(false);\n  useEffect(() => {\n    !dataReceived && props.socket.emit('getData', 'fruitData');\n    props.socket.on('remainder', remainder => {\n      setDataReceived(true); //once dataReceived set to true in state, no further requests; otherwise continuous requests sent as state continuously being updated\n      setRemainCount(remainder);\n    });\n  });\n  const remainingFruitData = Object.values(remainCount);\n  return (\n    <>\n      <div className=\"header\">Remainder fruits</div>\n      <div className=\"col-container remainder\">\n        {remainingFruitData.length > 0 &&\n          remainingFruitData.map(fruitData => (\n            <div className=\"fruit-remain\" key={fruitData.name}>\n              <span>{fruitData.name}</span> : <span>{fruitData.remainder}</span>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n});\n\nexport default Remaining;\n","import React from 'react';\nimport './Counter.css';\nimport TotalCount from './TotalCount';\nimport UserCount from './UserCount';\nimport Remaining from './Remaining';\n\nconst Counter = props => {\n  const { handleMsg, ...userProps } = props; //extracts handleMsg as not needed in TotalCount\n  return (\n    <div className=\"container\">\n      <TotalCount {...userProps} />\n      <UserCount {...props} />\n      <Remaining socket={props.socket} />\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = props => {\n  return (\n    <div className=\"relative\">\n      <header>\n        <p>InventCount</p>\n      </header>\n      {props.children}\n      <footer>\n        <p>Footer</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React, { useEffect } from 'react';\nimport './Message.css';\n\nconst Message = ({ msgBody, handleMsg }) => {\n  useEffect(() => {\n    setTimeout(() => handleMsg(false), 1500);\n  });\n  return <h2 className=\"info-message\">{msgBody}</h2>;\n};\n\nexport default Message;\n","import React, { Component } from 'react';\nimport { Route, Switch, Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { Counter, Wrapper, Message } from './components';\nimport socketIOClient from 'socket.io-client';\n\nconst webHistory = createBrowserHistory();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.msgModal = this.msgModal.bind(this);\n    this.state = {\n      socket: null,\n      displayMsg: false,\n      msgBody: ''\n    };\n  }\n  componentDidMount() {\n    const HOST = window.location.origin.replace(/^http/, 'ws');\n    const socket = socketIOClient(\n      process.env.NODE_ENV === 'production' ? HOST : 'http://localhost:8000'\n    );\n    socket\n      .on('connect', () => {\n        this.setState({ socket });\n        localStorage.setItem('socketId', socket.id);\n      })\n      .on('connected', data => console.log(`socket Msg: ${data}`));\n  }\n  componentWillUnmount() {\n    this.state.socket.disconnect().then(this.setState({ socket: null }));\n  }\n  msgModal(displayMsg, msgBody = '') {\n    this.setState({ displayMsg, msgBody });\n  }\n  render() {\n    return (\n      <Router history={webHistory}>\n        <Wrapper>\n          <Switch>\n            {['/', '/counter'].map(url => (\n              <Route\n                key={url}\n                path={url}\n                render={props =>\n                  this.state.socket ? (\n                    <Counter\n                      {...props}\n                      socket={this.state.socket}\n                      cookies={this.props.cookies}\n                      handleMsg={this.msgModal}\n                    />\n                  ) : null\n                }\n              />\n            ))}\n          </Switch>\n          {this.state.displayMsg && (\n            <Message handleMsg={this.msgModal} msgBody={this.state.msgBody} />\n          )}\n        </Wrapper>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}