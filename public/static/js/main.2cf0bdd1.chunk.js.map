{"version":3,"sources":["components/TotalCount.js","components/UserCount.js","components/Remaining.js","components/Counter.js","components/Wrapper.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["TotalCount","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","updateState","updateApiData","handleEnter","updateName","modalView","saveData","state","url","apiData","showModal","_this2","props","socket","on","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","socketId","wrap","_context","prev","next","response","t0","localStorage","getItem","t1","sent","console","log","stop","_x","apply","arguments","id","process","axios","get","concat","then","setState","catch","err","updatedData","newData","defineProperty","newApiData","objectSpread","itemId","toDo","headers","Socket","event","keyCode","preventDefault","updatedName","refs","textContent","post","name","fruitData","_this3","res","status","_this4","apiDataValues","values","react_default","createElement","Fragment","className","length","map","item","key","count","ref","contentEditable","onKeyDown","onBlur","dangerouslySetInnerHTML","__html","onClick","React","Component","UserCount","userData","userId","fruitId","fruitName","put","handleMsg","userInfo","Consumer","fruitInfo","counter","UserFruit","Remaining","memo","_useState","useState","_useState2","slicedToArray","remainCount","setRemainCount","_useState3","_useState4","dataReceived","setDataReceived","useEffect","emit","remainder","remainingFruitData","Counter","userProps","objectWithoutProperties","src_components_TotalCount","src_components_UserCount","components_Remaining","Wrapper","children","Message","msgBody","setTimeout","webHistory","createBrowserHistory","App","msgModal","displayMsg","socketIOClient","setItem","disconnect","undefined","Router","history","src_components_Wrapper","Switch","Route","path","render","src_components_Counter","assign","cookies","src_components_Message","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cf0bdd1.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './TotalCount.css';\n\nclass TotalCount extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.updateApiData = this.updateApiData.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.updateName = this.updateName.bind(this);\n    this.modalView = this.modalView.bind(this);\n    this.saveData = this.saveData.bind(this);\n    this.state = {\n      url: '',\n      apiData: [],\n      showModal: false\n    };\n  }\n\n  componentDidMount() {\n    //mounted to component to listen for socket updates on total fruit counter\n    // this.socketListeners.forEach(listener => this.props.socket.on(listner.eventName, listener.fn));\n    this.props.socket\n      .on('updatedCount', async data => {\n        this.updateApiData(data.response);\n        const { socketId } = data;\n        socketId === (await localStorage.getItem('socketId'))\n          ? console.log('you updated!')\n          : console.log('someone else updated!');\n      })\n      .on('fruit-delete', id => {\n        const { apiData } = this.state;\n        delete apiData[id];\n        this.updateState({ data: apiData });\n      });\n    // will call data for most recent fruit counter data\n    const url =\n      process.env.NODE_ENV === 'development'\n        ? process.env.REACT_APP_DEV_URL\n        : process.env.REACT_APP_PROD_URL;\n    axios\n      .get(`${url}/data/fruit`)\n      .then(this.updateState)\n      .then(() => this.setState({ url }))\n      .catch(err => console.log('error ', err));\n  }\n  updateState(response) {\n    this.setState({ apiData: response.data });\n  }\n  updateApiData(updatedData) {\n    const newData = { [updatedData.id]: updatedData };\n    const newApiData = { ...this.state.apiData, ...newData };\n    this.setState({ apiData: newApiData });\n  }\n  handleClick(itemId, toDo) {\n    axios.get(`${this.state.url}/data/fruit/${toDo}/${itemId}`, {\n      headers: {\n        Socket: localStorage.getItem('socketId')\n      }\n    });\n    // .then(response => console.log('response complete ', response));\n  }\n  handleEnter(event, itemId) {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      this.updateName(itemId);\n    }\n  }\n  updateName(itemId) {\n    const updatedName = this.refs[`fruit${itemId}`].textContent;\n    axios\n      .post(`${this.state.url}/data/fruit/name/${itemId}`, {\n        name: updatedName\n      })\n      .then(this.updateState);\n  }\n  modalView(showModal) {\n    this.setState({ showModal });\n  }\n  saveData(fruitData) {\n    axios.post(`${this.state.url}/data/fruit/fruit`, fruitData).then(res => {\n      if (res.status === 200) {\n        this.updateState(res);\n        this.modalView(false);\n      }\n    });\n  }\n  render() {\n    const apiDataValues = Object.values(this.state.apiData);\n    return (\n      <React.Fragment>\n        <div className=\"header\">All Fruits</div>\n        <div className=\"col-container\">\n          {apiDataValues.length > 0 &&\n            apiDataValues.map(item => (\n              <div key={item.name + item.count} className=\"fruit-container\">\n                <div className=\"count\">\n                  <p\n                    ref={'fruit' + item.id}\n                    className=\"inline\"\n                    contentEditable={true}\n                    onKeyDown={event => this.handleEnter(event, item.id)}\n                    onBlur={() => this.updateName(item.id)}\n                    dangerouslySetInnerHTML={{ __html: item.name }}\n                  />{' '}\n                  : <p className=\"inline\">{item.count}</p>\n                </div>\n                <section>\n                  <button\n                    className=\"decrease\"\n                    onClick={() => this.handleClick(item.id, 'subtract')}\n                  >\n                    -\n                  </button>\n                  <button\n                    className=\"increase\"\n                    onClick={() => this.handleClick(item.id, 'add')}\n                  >\n                    +\n                  </button>\n                  <button\n                    className=\"remove\"\n                    onClick={() => this.handleClick(item.id, 'remove')}\n                  >\n                    x\n                  </button>\n                </section>\n              </div>\n            ))}\n          {/* <button\n          className=\"add-button center\"\n          onClick={() => this.modalView(true)}\n        >\n          Add Item\n        </button> */}\n          {/* {this.state.showModal && (\n          <Modal\n            closeModal={this.modalView}\n            apiURL={this.state.url}\n            handleSave={this.saveData}\n          />\n        )} */}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TotalCount;\n","import React from 'react';\nimport axios from 'axios';\nimport './UserCount.css';\n\nclass UserCount extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      userData: []\n    };\n  }\n\n  componentDidMount() {\n    const url =\n      process.env.NODE_ENV === 'development'\n        ? process.env.REACT_APP_DEV_URL\n        : process.env.REACT_APP_PROD_URL;\n    axios\n      .get(`${url}/data/user`)\n      .then(response => this.setState({ userData: response.data, url }));\n  }\n\n  handleClick(userId, fruitId, fruitName) {\n    axios\n      .put(`${this.state.url}/data/user/`, { userId, fruitId })\n      .then(response => {\n        if (response.data !== 'Gone') {\n          this.props.handleMsg(\n            true,\n            `Congrats, you have one more ${fruitName}!`\n          );\n        } else {\n          this.props.handleMsg(true, `Sorry, ${fruitName} is all gone!`);\n        }\n      });\n  }\n\n  render() {\n    const { userData } = this.state;\n    return (\n      <>\n        <div className=\"header\">User & Fruits</div>\n        <div className=\"col-container\">\n          {userData.length &&\n            userData.map(userInfo => (\n              <div className=\"table-grid\" key={userInfo.name}>\n                <span key={userInfo.id + userInfo.name}>{userInfo.name}</span>\n                {userInfo.Consumer.length ? (\n                  userInfo.Consumer.map(fruitInfo => (\n                    <React.Fragment\n                      key={userInfo.id + userInfo.name + fruitInfo.name}\n                    >\n                      <span\n                        key={userInfo.id + userInfo.name + fruitInfo.id}\n                        onClick={() =>\n                          this.handleClick(\n                            userInfo.id,\n                            fruitInfo.id,\n                            fruitInfo.name\n                          )\n                        }\n                      >\n                        {fruitInfo.name}\n                      </span>\n                      <span\n                        key={\n                          userInfo.id +\n                          userInfo.name +\n                          fruitInfo.id +\n                          fruitInfo.counter\n                        }\n                      >\n                        {fruitInfo.UserFruit.counter}\n                      </span>\n                    </React.Fragment>\n                  ))\n                ) : (\n                  <span\n                    className=\"none\"\n                    key={userInfo.id + userInfo.name + userInfo.id}\n                  >\n                    None\n                  </span>\n                )}\n              </div>\n            ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default UserCount;\n","import React, { useState, useEffect } from 'react';\nimport './Remaining.css';\n\nconst Remaining = React.memo(props => {\n  const [remainCount, setRemainCount] = useState({});\n  const [dataReceived, setDataReceived] = useState(false);\n  useEffect(() => {\n    !dataReceived && props.socket.emit('getData', 'fruitData');\n    props.socket.on('remainder', remainder => {\n      setDataReceived(true); //once dataReceived set to true in state, no further requests; otherwise continuous requests sent as state continuously being updated\n      setRemainCount(remainder);\n    });\n  });\n  const remainingFruitData = Object.values(remainCount);\n  return (\n    <>\n      <div className=\"header\">Remainder fruits</div>\n      <div className=\"col-container remainder\">\n        {remainingFruitData.length > 0 &&\n          remainingFruitData.map(fruitData => (\n            <div className=\"fruit-remain\" key={fruitData.name}>\n              <span>{fruitData.name}</span> : <span>{fruitData.remainder}</span>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n});\n\nexport default Remaining;\n","import React from 'react';\nimport './Counter.css';\nimport TotalCount from './TotalCount';\nimport UserCount from './UserCount';\nimport Remaining from './Remaining';\n\nconst Counter = props => {\n  const { handleMsg, ...userProps } = props; //extracts handleMsg as not needed in TotalCount\n  return (\n    <div className=\"container\">\n      <TotalCount {...userProps} />\n      <UserCount {...props} />\n      <Remaining socket={props.socket} />\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = props => {\n  return (\n    <div className=\"relative\">\n      <header>\n        <p>InventCount</p>\n      </header>\n      {props.children}\n      <footer>\n        <p>Footer</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React, { useEffect } from 'react';\nimport './Message.css';\n\nconst Message = ({ msgBody, handleMsg }) => {\n  useEffect(() => {\n    setTimeout(() => handleMsg(false), 1500);\n  });\n  return <h2 className=\"info-message\">{msgBody}</h2>;\n};\n\nexport default Message;\n","import React, { Component } from 'react';\nimport { Route, Switch, Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { Counter, Wrapper, Message } from './components';\nimport socketIOClient from 'socket.io-client';\n\nconst webHistory = createBrowserHistory();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.msgModal = this.msgModal.bind(this);\n    this.state = {\n      socket: null,\n      displayMsg: false,\n      msgBody: ''\n    };\n  }\n  componentDidMount() {\n    const socket = socketIOClient('http://localhost:8000');\n    socket\n      .on('connect', () => {\n        console.log('i am connected!');\n        this.setState({ socket });\n        localStorage.setItem('socketId', socket.id);\n      })\n      .on('connected', data => console.log(`socket Msg: ${data}`));\n  }\n  componentWillUnmount() {\n    this.state.socket.disconnect().then(this.setState({ socket: null }));\n  }\n  msgModal(displayMsg, msgBody = '') {\n    this.setState({ displayMsg, msgBody });\n  }\n  render() {\n    return (\n      <Router history={webHistory}>\n        <Wrapper>\n          <Switch>\n            {['/', '/counter'].map(url => (\n              <Route\n                key={url}\n                path={url}\n                render={props =>\n                  this.state.socket ? (\n                    <Counter\n                      {...props}\n                      socket={this.state.socket}\n                      cookies={this.props.cookies}\n                      handleMsg={this.msgModal}\n                    />\n                  ) : null\n                }\n              />\n            ))}\n          </Switch>\n          {this.state.displayMsg && (\n            <Message handleMsg={this.msgModal} msgBody={this.state.msgBody} />\n          )}\n        </Wrapper>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}